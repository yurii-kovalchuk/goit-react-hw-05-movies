{"version":3,"file":"static/js/514.5440f82e.chunk.js","mappings":"gTAGaA,EAAgBC,EAAAA,GAAAA,IAAH,8CAGbC,EAAeD,EAAAA,GAAAA,IAAH,oGAMZE,EAAeF,EAAAA,GAAAA,IAAH,0CAIZG,EAAmBH,EAAAA,GAAAA,IAAH,0DAIhBI,GAAiBJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,oK,SCTdM,EAAY,SAAC,GAOnB,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,MACAC,EACI,EADJA,aAEMC,EAAOH,EAAaI,MAAM,EAAG,GAC7BC,EAAcR,EAAOS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,MACnDC,EAAYC,KAAKC,MAAqB,GAAfV,GAE7B,OACE,UAACb,EAAD,YACE,UAACE,EAAD,YACE,gBACEsB,IAAG,yCAAoCd,GACvCe,IAAKb,KAEP,UAACT,EAAD,YACE,0BACGS,EADH,KACYE,EADZ,QAGA,wCAAgBO,EAAhB,QACA,sCACA,uBAAIZ,KACJ,oCACA,uBAAIO,WAGR,UAACZ,EAAD,YACE,mDACA,2BACE,yBACE,SAACC,EAAD,CAAgBqB,GAAE,OAAlB,qBAEF,yBACE,SAACrB,EAAD,CAAgBqB,GAAE,UAAlB,8BAIN,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,ECvDYC,EAAkB5B,EAAAA,GAAAA,IAAH,0CAIf6B,EAAU7B,EAAAA,GAAAA,OAAH,4KC6CpB,EA3CqB,WAAO,IAAD,IACjB8B,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAiBhD,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,6GAECC,EAAAA,EAAAA,IAAA,6CACiBb,EADjB,8CAFD,OAEhBc,EAFgB,OAKtBV,EAAgBU,EAASC,MALH,iDAOtBC,EAAAA,EAAAA,IAAM,KAAIC,SAPY,yDAAH,qDAWvBL,GACD,GAAE,CAACZ,KAGF,UAACF,EAAD,YACE,SAAC,KAAD,CAAMH,GAAIY,EAASW,QAAnB,UACE,UAACnB,EAAD,CAASoB,KAAK,SAAd,WACE,SAAC,MAAD,KACA,4CAGHhB,IACC,SAAC3B,EAAD,CACEC,OAAQ0B,EAAa1B,OACrBC,SAAUyB,EAAazB,SACvBC,YAAawB,EAAaxB,YAC1BC,aAAcuB,EAAavB,aAC3BC,MAAOsB,EAAatB,MACpBC,aAAcqB,EAAarB,iBAKpC,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const WrapMovieCard = styled.div`\n  padding-top: 10px;\n`;\nexport const WrapMainInfo = styled.div`\n  display: flex;\n  padding-bottom 10px;\n  border-bottom: 1px solid grey;\n`;\n\nexport const WrapMainText = styled.div`\n  padding: 20px;\n`;\n\nexport const WrapAdditionInfo = styled.div`\n  border-bottom: 1px solid grey;\n`;\n\nexport const AdditionalItem = styled(NavLink)`\n  color: black;\n  text-decoration: none;\n  &:hover,\n  :focus {\n    text-decoration: underline;\n  }\n  :active {\n    color: red;\n  }\n`;\n","import { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport PropTypes, { string } from 'prop-types';\nimport {\n  WrapMainText,\n  WrapMainInfo,\n  WrapAdditionInfo,\n  WrapMovieCard,\n  AdditionalItem,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({\n  genres,\n  overview,\n  poster_path,\n  release_date,\n  title,\n  vote_average,\n}) => {\n  const date = release_date.slice(0, 4);\n  const genresNames = genres.map(genre => genre.name).join(', ');\n  const userScore = Math.round(vote_average * 10);\n\n  return (\n    <WrapMovieCard>\n      <WrapMainInfo>\n        <img\n          src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n          alt={title}\n        />\n        <WrapMainText>\n          <h3>\n            {title} ({date})\n          </h3>\n          <p>User score: {userScore}%</p>\n          <h4>Overview</h4>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <p>{genresNames}</p>\n        </WrapMainText>\n      </WrapMainInfo>\n      <WrapAdditionInfo>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <AdditionalItem to={`cast`}>Cast</AdditionalItem>\n          </li>\n          <li>\n            <AdditionalItem to={`reviews`}>Reviews</AdditionalItem>\n          </li>\n        </ul>\n      </WrapAdditionInfo>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </WrapMovieCard>\n  );\n};\n\nMovieCard.propTypes = {\n  genres: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: string,\n    })\n  ),\n  overview: PropTypes.string,\n  poster_path: PropTypes.string,\n  release_date: PropTypes.string,\n  title: PropTypes.string,\n  vote_average: PropTypes.number,\n};\n","import styled from 'styled-components';\n\nexport const WrapMovieDetail = styled.div`\n  padding: 10px;\n`;\n\nexport const BackBtn = styled.button`\n  cursor: pointer;\n  border-radius: 5px;\n  border: 2px solid silver;\n  &: active {\n    background-color: red;\n    border: 2px solid red;\n  }\n`;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { BackBtn, WrapMovieDetail } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDeteils] = useState(null);\n  const location = useLocation();\n  const backHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}?api_key=f9d814745439162b2afd5ff7833832ed`\n        );\n        setMovieDeteils(response.data);\n      } catch (err) {\n        toast(err.message);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <WrapMovieDetail>\n      <Link to={backHref.current}>\n        <BackBtn type=\"button\">\n          <TiArrowBackOutline />\n          <span> Go back</span>\n        </BackBtn>\n      </Link>\n      {movieDetails && (\n        <MovieCard\n          genres={movieDetails.genres}\n          overview={movieDetails.overview}\n          poster_path={movieDetails.poster_path}\n          release_date={movieDetails.release_date}\n          title={movieDetails.title}\n          vote_average={movieDetails.vote_average}\n        />\n      )}\n    </WrapMovieDetail>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["WrapMovieCard","styled","WrapMainInfo","WrapMainText","WrapAdditionInfo","AdditionalItem","NavLink","MovieCard","genres","overview","poster_path","release_date","title","vote_average","date","slice","genresNames","map","genre","name","join","userScore","Math","round","src","alt","to","Suspense","fallback","WrapMovieDetail","BackBtn","movieId","useParams","useState","movieDetails","setMovieDeteils","location","useLocation","backHref","useRef","state","from","useEffect","fetchMovieDetails","axios","response","data","toast","message","current","type"],"sourceRoot":""}